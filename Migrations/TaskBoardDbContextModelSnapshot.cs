// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskBoardDemo.Source.Infrastructure.Adapters.Output.Context;

#nullable disable

namespace TaskBoardDemo.Migrations
{
    [DbContext(typeof(TaskBoardDbContext))]
    partial class TaskBoardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskAssignmentData", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AssignedAt");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskAssignments");

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("9d32a5ca-fa04-4fda-bcf2-40e7a1a5687e"),
                            UserId = new Guid("582c1bd5-c2fb-42eb-ba97-300956fae069"),
                            AssignedAt = new DateTime(2025, 5, 5, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            TaskId = new Guid("9d32a5ca-fa04-4fda-bcf2-40e7a1a5687e"),
                            UserId = new Guid("a86193b7-280c-4fca-b7f4-1956563f8d47"),
                            AssignedAt = new DateTime(2025, 5, 5, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            TaskId = new Guid("f27d145e-662f-4601-ae80-90c83e430676"),
                            UserId = new Guid("c4c0122a-d3f4-4f51-bec8-046f27e134d1"),
                            AssignedAt = new DateTime(2025, 5, 6, 13, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DueDate");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("StatusId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d32a5ca-fa04-4fda-bcf2-40e7a1a5687e"),
                            CreatedAt = new DateTime(2025, 5, 5, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("47809d2b-f27b-46ec-bc1a-1631ccdb6629"),
                            Description = "Set up JWT-based auth, configure login & registration endpoints.",
                            DueDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = new Guid("5d288d05-fabc-4c31-a3a5-efc0c65fcd03"),
                            Title = "Implement user authentication",
                            UpdatedAt = new DateTime(2025, 5, 5, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("f27d145e-662f-4601-ae80-90c83e430676"),
                            CreatedAt = new DateTime(2025, 5, 6, 14, 30, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("582c1bd5-c2fb-42eb-ba97-300956fae069"),
                            Description = "Create tables and relationships for tasks, users and assignments.",
                            DueDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = new Guid("5d288d05-fabc-4c31-a3a5-efc0c65fcd03"),
                            Title = "Design database schema",
                            UpdatedAt = new DateTime(2025, 5, 6, 14, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("37439628-c72b-4087-9269-4b4845d24aef"),
                            CreatedAt = new DateTime(2025, 5, 7, 9, 15, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("a86193b7-280c-4fca-b7f4-1956563f8d47"),
                            Description = "Resolve null-reference error when updating task status via API.",
                            DueDate = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = new Guid("e1f7b815-e9eb-48c1-a487-d90097a5b03f"),
                            Title = "Fix bug #42 in TaskController",
                            UpdatedAt = new DateTime(2025, 5, 7, 9, 15, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("a2047ded-82bc-4ab5-a666-e57a027f4099"),
                            CreatedAt = new DateTime(2025, 5, 8, 11, 45, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("c4c0122a-d3f4-4f51-bec8-046f27e134d1"),
                            Description = "Improve performance of monthly summary reports by adding indexes.",
                            DueDate = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = new Guid("e1f7b815-e9eb-48c1-a487-d90097a5b03f"),
                            Title = "Optimize SQL queries for reports",
                            UpdatedAt = new DateTime(2025, 5, 8, 11, 45, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("4823a311-d377-497e-80a9-ad3c030c6f92"),
                            CreatedAt = new DateTime(2025, 5, 4, 16, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("d7895c16-c97e-4b27-b070-516dd7166d89"),
                            Description = "Clean up and reorganize service classes for better maintainability.",
                            DueDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = new Guid("e969c3bc-2ffd-4315-9da3-ce6ebc3f4599"),
                            Title = "Refactor services layer",
                            UpdatedAt = new DateTime(2025, 5, 8, 16, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("434bcb00-de9e-440f-a12d-3ca17bc4c156"),
                            CreatedAt = new DateTime(2025, 5, 3, 13, 20, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("47809d2b-f27b-46ec-bc1a-1631ccdb6629"),
                            Description = "Cover main CRUD operations in TaskService with xUnit tests.",
                            DueDate = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = new Guid("e969c3bc-2ffd-4315-9da3-ce6ebc3f4599"),
                            Title = "Write unit tests for TaskService",
                            UpdatedAt = new DateTime(2025, 5, 5, 13, 20, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskStatusData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TaskStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d288d05-fabc-4c31-a3a5-efc0c65fcd03"),
                            Name = "Pendiente"
                        },
                        new
                        {
                            Id = new Guid("e1f7b815-e9eb-48c1-a487-d90097a5b03f"),
                            Name = "En progreso"
                        },
                        new
                        {
                            Id = new Guid("e969c3bc-2ffd-4315-9da3-ce6ebc3f4599"),
                            Name = "Completada"
                        });
                });

            modelBuilder.Entity("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.UserData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ProfileImage");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47809d2b-f27b-46ec-bc1a-1631ccdb6629"),
                            Email = "juan@gmail.com",
                            Name = "Juan",
                            PasswordHash = "$2a$11$ISa.OtzV/z749.siWa4eCeYxD4z5ZW64JH8yRo3Sx7v/CpCHd3kRe",
                            ProfileImage = "https://api.dicebear.com/9.x/adventurer/svg?seed=Juan"
                        },
                        new
                        {
                            Id = new Guid("582c1bd5-c2fb-42eb-ba97-300956fae069"),
                            Email = "pedro@gmail.com",
                            Name = "Pedro",
                            PasswordHash = "$2a$11$k1JlK5TBemoH.HogQHpsS.MjPAtJiwZ2fNO6fD3x3AxneCPoQjpce",
                            ProfileImage = "https://api.dicebear.com/9.x/adventurer/svg?seed=Pedro"
                        },
                        new
                        {
                            Id = new Guid("a86193b7-280c-4fca-b7f4-1956563f8d47"),
                            Email = "maria@gmail.com",
                            Name = "Maria",
                            PasswordHash = "$2a$11$k1JlK5TBemoH.HogQHpsS.MjPAtJiwZ2fNO6fD3x3AxneCPoQjpce",
                            ProfileImage = "https://api.dicebear.com/9.x/adventurer/svg?seed=Maria"
                        },
                        new
                        {
                            Id = new Guid("c4c0122a-d3f4-4f51-bec8-046f27e134d1"),
                            Email = "ana@gmail.com",
                            Name = "Ana",
                            PasswordHash = "$2a$11$AvgbZtrqb3QYahLjPgEAReoGhKWJKmU8rshLFQL9VwT.S67Xm0wAy",
                            ProfileImage = "https://api.dicebear.com/9.x/adventurer/svg?seed=Ana"
                        },
                        new
                        {
                            Id = new Guid("d7895c16-c97e-4b27-b070-516dd7166d89"),
                            Email = "luis@gmail.com",
                            Name = "Luis",
                            PasswordHash = "$2a$11$YGDf30Qh0Qodt4qm.m58ZOY/aeSY36YHThpd5Hcne/Z606W0xQdAe",
                            ProfileImage = "https://api.dicebear.com/9.x/adventurer/svg?seed=Luis"
                        });
                });

            modelBuilder.Entity("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskAssignmentData", b =>
                {
                    b.HasOne("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskData", "Task")
                        .WithMany("Assignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.UserData", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskData", b =>
                {
                    b.HasOne("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.UserData", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskStatusData", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskData", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("TaskBoardDemo.Source.Infrastructure.Adapters.Output.Data.TaskStatusData", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
